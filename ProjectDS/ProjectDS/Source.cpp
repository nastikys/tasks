#include <iostream>
#include <cmath>

using namespace std;





struct Stack
{
	int SIZE;               //????  ??????????? ????????? ?????
	double *data;           // ????????? ?? ?????? ???? 
	int counter;      // ??????????? ?????????


	Stack(int N = 100)      // ??????? ???????????. ??????????? ?????????? 100
	{
		SIZE = N;     //???? ???????????=100
		counter = 0;   //????????? ??????????? ????????? = 0.?????? ????
		data = new double[SIZE]; // ??????? ?????? ????????? 
	}

};

//???????? ?????????? ???????

void push(Stack &s, const double value)  //????? ?????????? ????????? ? ????. ???????? ?????? ?? ????, ???? ??? ???????? ?. ?????????? ???????? ???????? ?????
{
	if (s.counter == s.SIZE) //???? ? ????? ????? ??????????? ?? ????? ??????????? ?????????????, ?? ???? 100, ??

	{
		cout << "\nStack is overloaded.\n";  //?? ???? ????????? ????????.
	}
	else
	{
		s.data[s.counter++] = value; //???? ??????????? ????????? ?????? ??? 100, ?? ?????? ????? (??????????? ????? ??????? ?????)=???????? ????????.
	}
}



bool pop(Stack &s, double &out) // ??????????? ????????, ????? ??????? ????????. ???????? ??? ???? ? ? ?????????? ???
{
	if (s.counter < 1) //???? ???? ????????? ?????? 1 ?? ???? 0
	{
		return false; //??????, ?????? ???????
	}
	else               //???? ????????? ?????? 1(1 ?????)
	{
		out = s.data[--s.counter];  //?? ???????? ??? ??????????? ????????????? ??????? ??????? 
		return true;
	}
	
}


int main() 
{
	Stack s(10), ss(10);        //??????? ??? ????? ? ? ??
	push(s, 2.1); push(s, 3.7); push(s, 3); push(s, 5.55); push(s, 3.531); //????????? ???? ????????? ? ???? ?
	push(s, 6.9); push(s, 12); push(s, 0.5); push(s, 1.89); push(s, 3.533);
	//push(s, 777);
	double x; //?????? ?????????? ?(??? ???????)
	while (pop(s, x))  //???? ??????????? ???????????? ?????????
	{
		if (!(x*x - sqrt(x) > 3 * x))  //???? ?? ?????????
		{
			push(ss, x);   //????????? ?????? ? ???? ??
		}
	}

	while (pop(ss, x))  //??? ??? ? ????? ?? ???????
	{ 
		cout << x << endl;
	}       //  output (x<=3.532)

	system("pause");

	return 0;
}